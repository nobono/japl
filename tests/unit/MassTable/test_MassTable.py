import unittest
import numpy as np
from pathlib import Path
from japl.global_opts import get_root_dir
from japl.MassProp.MassPropTable import MassPropTable
from japl.MassTable.MassTable import MassTable



class TestMassTable(unittest.TestCase):


    def setUp(self) -> None:
        self.TOLERANCE_PLACES = 15


    def test_case1(self):
        masstable = MassTable(Path(get_root_dir(), "aerodata/stage_1_mass.mat"))

        true_mass_dot = [-10.31167464885044, -10.31167464885044, -10.311674285975979, -10.31167495124649, -10.380648146548886, -10.397893032945248, -10.397891762889635, -10.31167495124549, -10.311674346454392, -10.311674648851453,  # noqa
                         -10.31167458837101, -10.380649053733034, -10.397892125763109, -10.397893032948243, -8.62179305047538, -10.360379975966024, -10.345981748792006, -10.336982814199446, -10.360379851296424, -10.333833352713471,  # noqa
                         -10.349131334947572, -10.357230266718823, -10.325734420942053, -10.360379851296592, -10.345081788579298, -10.337882746006366, -10.360379975966028, -10.332933355415461, -10.350031161811016, -10.356330385410889,  # noqa
                         -10.326634302250442, -10.360379851296203, -10.344181987754324, -10.338782699906822, -10.360379851296333, -10.332033440967416, -10.350931139382988, -10.355430585375046, -10.32753402022501, -10.360379841827895,  # noqa
                         -10.343282106446285, -10.339682581214731, -10.360379851296436, -10.33113370878962, -10.351830978871424, -10.354530592022227, -10.328433909423355, -10.360379975966106, -10.342382191998345, -10.340582413601604,  # noqa
                         -10.360379796063075, -10.330233827481736, -10.35273086017928, -10.353630741487164, -10.329333946173907, -10.360379851296358, -10.341482244410502, -10.341482302799921, -10.360379975966133, -10.329333798621828,  # noqa
                         -10.353630806978149, -10.352730759180997, -10.330233827481763, -10.360379851296464, -10.340582462522615, -10.34238222513843, -10.360379851296488, -10.328433896798531, -10.354530696176662, -10.35183102858145,  # noqa
                         -10.331133577018527, -10.360379829203108, -10.33968258121476, -10.343282106446246, -10.36037985129641, -10.327534183558116, -10.355430504102927, -10.350931047853418, -10.332033466217016, -10.360379960658525,  # noqa
                         -10.33878263630945, -10.344181963767205, -10.360379900533049, -10.326634196754302, -10.3563304101082, -10.35003121333608, -10.332933393526318, -10.360379898323767, -10.337882765890507, -10.345081849178037,  # noqa
                         -10.360379881280288, -10.325734312842634, -10.357230302225961, -10.349131333527325, -10.333833281541253, -10.360379896903426, -10.33698287716547, -10.345981729696993, -10.360379893747268, 0.0]  # noqa
        true_cg = [1.390863442750701, 1.3900506751359352, 1.3892379075211694, 1.3884251399064034, 1.3876123722916378, 1.3867996046768718, 1.385986837062106, 1.38517406944734, 1.3843613018325742, 1.3835485342178087,  # noqa
                   1.3827357666030429, 1.381922998988277, 1.381110231373511, 1.380297463758745, 1.3794846961439795, 1.3794164236643391, 1.3742250059862915, 1.369033588308244, 1.3638421706301964, 1.358650752952149,  # noqa
                   1.3534593352741013, 1.348267917596054, 1.3430764999180063, 1.3378850822399588, 1.3326936645619112, 1.3275022468838635, 1.3223108292058159, 1.3171194115277687, 1.3119279938497208, 1.3067365761716734,  # noqa
                   1.3015451584936257, 1.2963537408155783, 1.2911623231375307, 1.285970905459483, 1.2807794877814356, 1.275588070103388, 1.2703966524253403, 1.2652052347472929, 1.2600138170692454, 1.2548223993911978,  # noqa
                   1.2496309817131501, 1.2444395640351025, 1.239248146357055, 1.2340567286790076, 1.22886531100096, 1.2236738933229123, 1.218482475644865, 1.2132910579668172, 1.2080996402887696, 1.2029082226107222,  # noqa
                   1.1977168049326745, 1.192525387254627, 1.1873339695765794, 1.182142551898532, 1.1769511342204846, 1.171759716542437, 1.1665682988643893, np.nan, np.nan, np.nan,  # noqa
                   np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                   np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                   np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan,
                   np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan]
        true_thrust = [2915.8, 5738.4, 8165.4, 10921.0, 14394.0, 17886.0, 21256.0, 24319.0, 25540.0, 26333.0,
                       26746.0, 26752.0, 26857.0, 26913.0, 26921.0, 26671.0, 27026.0, 27107.0, 27184.0, 27238.0,
                       27211.0, 27109.0, 26931.0, 26665.0, 26359.0, 25817.0, 25374.0, 25247.0, 25191.0, 25134.0,
                       25059.0, 24999.0, 24844.0, 24880.0, 24991.0, 24965.0, 24826.0, 24687.0, 24702.0, 24851.0,
                       24939.0, 25081.0, 25166.0, 25265.0, 25413.0, 25579.0, 25748.0, 25959.0, 26211.0, 26439.0,
                       26628.0, 26791.0, 26943.0, 26990.0, 26948.0, 26763.0, 26584.0, 26548.0, 26502.0, 26386.0,
                       25885.0, 25194.0, 25340.0, 25832.0, 25369.0, 25207.0, 25310.0, 25298.0, 25483.0, 25889.0,
                       25905.0, 25845.0, 26032.0, 26257.0, 26591.0, 26944.0, 27569.0, 28882.0, 30006.0, 30396.0,
                       30588.0, 30709.0, 30541.0, 29500.0, 26987.0, 23488.0, 19725.0, 15812.0, 12375.0, 9510.7,
                       7211.0, 5357.4, 4014.2, 3042.3, 2206.5, 1487.1, 1034.9, 693.26, 588.73, 0.0]
        true_burn_time = [0.0, 0.0035714285714285718, 0.0071428571428571435, 0.010714285714285716, 0.014285714285714287, 0.017857142857142856, 0.021428571428571432, 0.025, 0.028571428571428574, 0.03214285714285715,  # noqa
                          0.03571428571428571, 0.03928571428571429, 0.042857142857142864, 0.04642857142857143, 0.05, 0.050300000000000004, 0.07311190476190477, 0.09592380952380952, 0.11873571428571428, 0.14154761904761906,  # noqa
                          0.16435952380952382, 0.18717142857142857, 0.20998333333333333, 0.2327952380952381, 0.25560714285714287, 0.2784190476190476, 0.3012309523809524, 0.32404285714285713, 0.3468547619047619, 0.36966666666666664,  # noqa
                          0.3924785714285714, 0.4152904761904762, 0.43810238095238097, 0.4609142857142857, 0.4837261904761904, 0.5065380952380952, 0.52935, 0.5521619047619047, 0.5749738095238095, 0.5977857142857143,  # noqa
                          0.6205976190476191, 0.6434095238095238, 0.6662214285714285, 0.6890333333333333, 0.7118452380952381, 0.7346571428571428, 0.7574690476190475, 0.7802809523809524, 0.8030928571428572, 0.8259047619047619,  # noqa
                          0.8487166666666666, 0.8715285714285714, 0.8943404761904762, 0.9171523809523808, 0.9399642857142856, 0.9627761904761905, 0.9855880952380952, 1.0084, 1.0312119047619046, 1.0540238095238095,  # noqa
                          1.0768357142857143, 1.099647619047619, 1.1224595238095236, 1.1452714285714285, 1.1680833333333334, 1.1908952380952382, 1.2137071428571429, 1.2365190476190475, 1.2593309523809524, 1.282142857142857,  # noqa
                          1.304954761904762, 1.3277666666666665, 1.3505785714285714, 1.3733904761904763, 1.396202380952381, 1.4190142857142856, 1.4418261904761904, 1.464638095238095, 1.48745, 1.5102619047619048,  # noqa
                          1.5330738095238094, 1.5558857142857143, 1.5786976190476192, 1.6015095238095238, 1.6243214285714285, 1.6471333333333331, 1.669945238095238, 1.6927571428571428, 1.7155690476190475, 1.7383809523809524,  # noqa
                          1.7611928571428572, 1.7840047619047616, 1.8068166666666665, 1.8296285714285712, 1.852440476190476, 1.875252380952381, 1.8980642857142858, 1.9208761904761904, 1.9436880952380953, 1.9665]  # noqa
        true_prop_mass = [20.34588575635, 20.30905834688982, 20.27223093742964, 20.23540352926544, 20.198576118725274, 20.161502375344742, 20.124367043084224, 20.087231715359618, 20.050404304819455, 20.01357689643926,  # noqa
                          19.976749486979077, 19.939922077734895, 19.90284833111442, 19.865713002093838, 19.828577669833308, 19.825991131918165, 19.589651130609283, 19.353639580287435, 19.11783331280447, 18.88149331433954,  # noqa
                          18.645758892072045, 18.409675493690777, 18.17340734324927, 17.937857673042018, 17.701517674577083, 17.465526654061897, 17.22969985742026, 16.99335985611138, 16.757645964496533, 16.521542039350553,  # noqa
                          16.28529441691574, 16.049724218701783, 15.813384220236857, 15.577413725892395, 15.341566399588093, 15.105226401123163, 14.869533038271, 14.63340858292236, 14.39718148664027, 14.161590764145565,  # noqa
                          13.925250765896628, 13.689300799558863, 13.453432945247867, 13.217092946782936, 12.981420108535522, 12.745275126134173, 12.509068560414732, 12.273457309733338, 12.037117308424454, 11.801187870849368,  # noqa
                          11.565299489647662, 11.328959492442708, 11.093307182201988, 10.857141671793947, 10.620955633379213, 10.385323851145182, 10.148983852680253, 9.913074944623832, 9.677166035235437, 9.440826033926552,  # noqa
                          9.205194255058466, 8.969008215149758, 8.73284270704568, 8.497190396804958, 8.260850398340025, 8.024962016022336, 7.789032577691263, 7.552692579226331, 7.317081328832933, 7.080874760737533,  # noqa
                          6.844729777202201, 6.6090569419607395, 6.372716943999798, 6.1368490896888, 5.900899123351036, 5.6645591248861065, 5.428968398665462, 5.192741304237344, 4.956616850976667, 4.720923487548511,  # noqa
                          4.484583486588823, 4.248736161735296, 4.012765667938025, 3.7764256683499138, 3.540855472542527, 3.304607849544322, 3.0685039232229565, 2.8327900307387277, 2.5964500312010146, 2.3606232341057827,  # noqa
                          2.1246322122082226, 1.888292213059306, 1.6527425453180067, 1.4164743940665152, 1.1803909957176444, 0.9446565750737225, 0.7083165755684078, 0.47251030664907, 0.23649875676281443, 0.0001587573295]  # noqa

        self.assertEqual(masstable.nozzle_area, 0)
        self.assertEqual(masstable.dry_mass, 20.345885756350004)
        self.assertEqual(masstable.wet_mass, 37.53417795733863)
        self.assertEqual(masstable.vac_flag, 0)
        self.assertEqual(masstable.burn_time_max, 1.9665)

        self.assertListEqual(masstable.propellant_mass.tolist(), true_prop_mass)  # type:ignore
        self.assertListEqual(masstable.burn_time.tolist(), true_burn_time)  # type:ignore
        self.assertListEqual(masstable.mass_dot.tolist(), true_mass_dot)
        self.assertListEqual(masstable.cg.tolist()[:50], true_cg[:50])
        self.assertListEqual(masstable.thrust.tolist(), true_thrust)

        self.assertAlmostEqual(masstable.get_thrust(t=0, pressure=0), 2915.8, places=self.TOLERANCE_PLACES)
        self.assertAlmostEqual(masstable.get_thrust(t=.5, pressure=0), 24972.45183175034, places=self.TOLERANCE_PLACES)

        self.assertEqual(masstable.get_wet_mass(), masstable.wet_mass)
        self.assertEqual(masstable.get_dry_mass(), masstable.dry_mass)

        self.assertEqual(masstable.get_cg(t=0), 1.390863442750701)
        self.assertEqual(masstable.get_cg(t=.5), 1.2770759766834858)

        self.assertEqual(masstable.get_isp(t=0, pressure=0), -28.83419653016797)
        self.assertEqual(masstable.get_isp(t=.5, pressure=0), -246.27103923526172)

        self.assertEqual(masstable.get_raw_thrust(t=0), 2915.8)
        self.assertEqual(masstable.get_raw_thrust(t=.5), 24972.45183175034)

        self.assertEqual(masstable.get_mass_dot(t=0), -10.31167464885044)
        self.assertEqual(masstable.get_mass_dot(t=.5), -10.340157774832692)

        # testing `cpp` member ----------------------------------------------------
        self.assertEqual(masstable.cpp.nozzle_area, 0)
        self.assertEqual(masstable.cpp.dry_mass, 20.345885756350004)
        self.assertEqual(masstable.cpp.wet_mass, 37.53417795733863)
        self.assertEqual(masstable.cpp.vac_flag, 0)
        self.assertEqual(masstable.cpp.burn_time_max, 1.9665)

        self.assertListEqual(masstable.cpp.propellant_mass, true_prop_mass)
        self.assertListEqual(masstable.cpp.burn_time, true_burn_time)  # type:ignore
        self.assertListEqual(masstable.cpp.mass_dot.data.tolist(), true_mass_dot)
        self.assertListEqual(masstable.cpp.cg.data.tolist()[:50], true_cg[:50])
        self.assertListEqual(masstable.cpp.thrust.data.tolist(), true_thrust)

        self.assertAlmostEqual(masstable.cpp.get_thrust(dict(t=0, pressure=0)), 2915.8,
                               places=self.TOLERANCE_PLACES)
        self.assertAlmostEqual(masstable.cpp.get_thrust(dict(t=.5, pressure=0)), 24972.45183175034,
                               places=self.TOLERANCE_PLACES)

        self.assertEqual(masstable.cpp.get_wet_mass(), masstable.wet_mass)
        self.assertEqual(masstable.cpp.get_dry_mass(), masstable.dry_mass)

        self.assertEqual(masstable.cpp.get_cg(dict(t=0)), 1.390863442750701)
        self.assertEqual(masstable.cpp.get_cg(dict(t=.5)), 1.2770759766834858)

        self.assertEqual(masstable.cpp.get_isp(dict(t=0, pressure=0)), -28.83419653016797)
        self.assertEqual(masstable.cpp.get_isp(dict(t=.5, pressure=0)), -246.27103923526172)

        self.assertEqual(masstable.cpp.get_raw_thrust(dict(t=0)), 2915.8)
        self.assertEqual(masstable.cpp.get_raw_thrust(dict(t=.5)), 24972.45183175034)

        self.assertEqual(masstable.cpp.get_mass_dot(dict(t=0)), -10.31167464885044)
        self.assertEqual(masstable.cpp.get_mass_dot(dict(t=.5)), -10.340157774832692)


if __name__ == '__main__':
    unittest.main()
