import unittest
import numpy as np
from pathlib import Path
from japl.global_opts import get_root_dir
from japl.MassProp.MassPropTable import MassPropTable
from japl.MassTable.MassTable import MassTable



class TestMassTable(unittest.TestCase):


    def setUp(self) -> None:
        self.TOLERANCE_PLACES = 15


    def test_case1(self):
        masstable = MassTable(Path(get_root_dir(), "aerodata/stage_1_mass.mat"))

        true_mass_dot = [-8.249339719080352, -8.249339719080352, -8.249339428780784, -8.249339960997192, -8.304518517239108, -8.3183144263562, -8.318313410311708, -8.249339960996393, -8.249339477163515, -8.249339719081162, # noqa
                         -8.24933967069681, -8.304519242986428, -8.318313700610487, -8.318314426358596, -6.897434440380305, -8.28830398077282, -8.276785399033605, -8.269586251359557, -8.28830388103714, -8.267066682170777,  # noqa
                         -8.279305067958058, -8.285784213375058, -8.260587536753643, -8.288303881037274, -8.276065430863438, -8.270306196805093, -8.288303980772822, -8.266346684332369, -8.280024929448812, -8.285064308328712,  # noqa
                         -8.261307441800353, -8.288303881036963, -8.27534559020346, -8.271026159925459, -8.288303881037066, -8.265626752773933, -8.28074491150639, -8.284344468300038, -8.262027216180007, -8.288303873462317,  # noqa
                         -8.274625685157028, -8.271746064971785, -8.28830388103715, -8.264906967031697, -8.28146478309714, -8.283624473617783, -8.262747127538685, -8.288303980772886, -8.273905753598676, -8.272465930881284,  # noqa
                         -8.28830383685046, -8.264187061985389, -8.282184688143424, -8.282904593189732, -8.263467156939127, -8.288303881037086, -8.273185795528402, -8.273185842239938, -8.288303980772907, -8.263467038897463,  # noqa
                         -8.28290464558252, -8.282184607344798, -8.26418706198541, -8.288303881037171, -8.272465970018093, -8.273905780110743, -8.28830388103719, -8.262747117438826, -8.28362455694133, -8.28146482286516,  # noqa
                         -8.264906861614822, -8.288303863362486, -8.271746064971808, -8.274625685156996, -8.288303881037129, -8.262027346846493, -8.284344403282342, -8.280744838282734, -8.265626772973613, -8.28830396852682,  # noqa
                         -8.27102610904756, -8.275345571013764, -8.28830392042644, -8.261307357403442, -8.28506432808656, -8.280024970668865, -8.266346714821054, -8.288303918659015, -8.270306212712406, -8.27606547934243,  # noqa
                         -8.28830390502423, -8.260587450274107, -8.28578424178077, -8.27930506682186, -8.267066625233003, -8.288303917522741, -8.269586301732376, -8.276785383757595, -8.288303914997815, 0.0]  # noqa

        true_cg = [1.1126907542005608, 1.112040540108748, 1.1113903260169355, 1.1107401119251228, 1.1100898978333102, 1.1094396837414975, 1.108789469649685, 1.108139255557872, 1.1074890414660594, 1.1068388273742469,  # noqa
                   1.1061886132824343, 1.1055383991906218, 1.1048881850988088, 1.104237971006996, 1.1035877569151837, 1.1035331389314713, 1.0993800047890332, 1.0952268706465953, 1.0910737365041572, 1.0869206023617193,  # noqa
                   1.0827674682192812, 1.0786143340768433, 1.0744611999344051, 1.070308065791967, 1.066154931649529, 1.0620017975070908, 1.0578486633646527, 1.053695529222215, 1.0495423950797766, 1.0453892609373387,  # noqa
                   1.0412361267949006, 1.0370829926524627, 1.0329298585100246, 1.0287767243675865, 1.0246235902251486, 1.0204704560827105, 1.0163173219402724, 1.0121641877978342, 1.0080110536553963, 1.0038579195129582,  # noqa
                   0.9997047853705201, 0.995551651228082, 0.9913985170856441, 0.9872453829432062, 0.9830922488007681, 0.97893911465833, 0.9747859805158919, 0.9706328463734538, 0.9664797122310157, 0.9623265780885778,  # noqa
                   0.9581734439461397, 0.9540203098037017, 0.9498671756612636, 0.9457140415188257, 0.9415609073763878, 0.9374077732339496, 0.9332546390915115, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113,  # noqa
                   0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113,  # noqa
                   0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113,  # noqa
                   0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113,  # noqa
                   0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113, 0.9332546390915113]  # noqa

        true_thrust = [2332.6400000000003, 4590.72, 6532.32, 8736.800000000001, 11515.2, 14308.800000000001, 17004.8, 19455.2, 20432.0, 21066.4,  # noqa
                       21396.800000000003, 21401.600000000002, 21485.600000000002, 21530.4, 21536.800000000003, 21336.800000000003, 21620.800000000003, 21685.600000000002, 21747.2, 21790.4,  # noqa
                       21768.800000000003, 21687.2, 21544.800000000003, 21332.0, 21087.2, 20653.600000000002, 20299.2, 20197.600000000002, 20152.800000000003, 20107.2,  # noqa
                       20047.2, 19999.2, 19875.2, 19904.0, 19992.800000000003, 19972.0, 19860.800000000003, 19749.600000000002, 19761.600000000002, 19880.800000000003,  # noqa
                       19951.2, 20064.800000000003, 20132.800000000003, 20212.0, 20330.4, 20463.2, 20598.4, 20767.2, 20968.800000000003, 21151.2,  # noqa
                       21302.4, 21432.800000000003, 21554.4, 21592.0, 21558.4, 21410.4, 21267.2, 21238.4, 21201.600000000002, 21108.800000000003,  # noqa
                       20708.0, 20155.2, 20272.0, 20665.600000000002, 20295.2, 20165.600000000002, 20248.0, 20238.4, 20386.4, 20711.2,  # noqa
                       20724.0, 20676.0, 20825.600000000002, 21005.600000000002, 21272.800000000003, 21555.2, 22055.2, 23105.600000000002, 24004.800000000003, 24316.800000000003,  # noqa
                       24470.4, 24567.2, 24432.800000000003, 23600.0, 21589.600000000002, 18790.4, 15780.0, 12649.6, 9900.0, 7608.560000000001,  # noqa
                       5768.8, 4285.92, 3211.36, 2433.84, 1765.2, 1189.68, 827.9200000000001, 554.6080000000001, 470.98400000000004, 0.0]  # noqa

        true_burn_time = [0.0, 0.0035714285714285718, 0.0071428571428571435, 0.010714285714285716, 0.014285714285714287, 0.017857142857142856, 0.021428571428571432, 0.025, 0.028571428571428574, 0.03214285714285715,  # noqa
                          0.03571428571428571, 0.03928571428571429, 0.042857142857142864, 0.04642857142857143, 0.05, 0.050300000000000004, 0.07311190476190477, 0.09592380952380952, 0.11873571428571428, 0.14154761904761906,  # noqa
                          0.16435952380952382, 0.18717142857142857, 0.20998333333333333, 0.2327952380952381, 0.25560714285714287, 0.2784190476190476, 0.3012309523809524, 0.32404285714285713, 0.3468547619047619, 0.36966666666666664,  # noqa
                          0.3924785714285714, 0.4152904761904762, 0.43810238095238097, 0.4609142857142857, 0.4837261904761904, 0.5065380952380952, 0.52935, 0.5521619047619047, 0.5749738095238095, 0.5977857142857143,  # noqa
                          0.6205976190476191, 0.6434095238095238, 0.6662214285714285, 0.6890333333333333, 0.7118452380952381, 0.7346571428571428, 0.7574690476190475, 0.7802809523809524, 0.8030928571428572, 0.8259047619047619,  # noqa
                          0.8487166666666666, 0.8715285714285714, 0.8943404761904762, 0.9171523809523808, 0.9399642857142856, 0.9627761904761905, 0.9855880952380952, 1.0084, 1.0312119047619046, 1.0540238095238095,  # noqa
                          1.0768357142857143, 1.099647619047619, 1.1224595238095236, 1.1452714285714285, 1.1680833333333334, 1.1908952380952382, 1.2137071428571429, 1.2365190476190475, 1.2593309523809524, 1.282142857142857,  # noqa
                          1.304954761904762, 1.3277666666666665, 1.3505785714285714, 1.3733904761904763, 1.396202380952381, 1.4190142857142856, 1.4418261904761904, 1.464638095238095, 1.48745, 1.5102619047619048,  # noqa
                          1.5330738095238094, 1.5558857142857143, 1.5786976190476192, 1.6015095238095238, 1.6243214285714285, 1.6471333333333331, 1.669945238095238, 1.6927571428571428, 1.7155690476190475, 1.7383809523809524,  # noqa
                          1.7611928571428572, 1.7840047619047616, 1.8068166666666665, 1.8296285714285712, 1.852440476190476, 1.875252380952381, 1.8980642857142858, 1.9208761904761904, 1.9436880952380953, 1.9665]  # noqa

        true_prop_mass = [16.27670860508, 16.247246677511857, 16.217784749943714, 16.188322823412353, 16.15886089498022, 16.129201900275795, 16.09949363446738, 16.069785372287694, 16.040323443855566, 16.010861517151408,  # noqa
                          15.981399589583262, 15.951937662187916, 15.922278664891536, 15.892570401675071, 15.862862135866648, 15.860792905534533, 15.671720904487428, 15.482911664229949, 15.294266650243578, 15.105194651471633,  # noqa
                          14.916607113657637, 14.727740394952622, 14.538725874599416, 14.350286138433615, 14.161214139661666, 13.972421323249518, 13.78375988593621, 13.594687884889105, 13.406116771597226, 13.217233631480443,  # noqa
                          13.028235533532593, 12.839779374961427, 12.650707376189487, 12.461930980713916, 12.273253119670475, 12.084181120898531, 11.895626430616801, 11.706726866337888, 11.517745189312215, 11.329272611316453,  # noqa
                          11.140200612717303, 10.95144063964709, 10.762746356198294, 10.573674357426349, 10.385136086828417, 10.19622010090734, 10.007254848331787, 9.818765847786672, 9.629693846739563, 9.440950296679494,  # noqa
                          9.25223959171813, 9.063167593954168, 8.87464574576159, 8.685713337435159, 8.49676450670337, 8.308259080916146, 8.119187082144203, 7.930459955699066, 7.741732828188351, 7.552660827141242,  # noqa
                          7.364155404046773, 7.175206572119807, 6.986274165636544, 6.797752317443967, 6.608680318672021, 6.419969612817869, 6.23122606215301, 6.042154063381066, 5.853665063066347, 5.664699808590027,  # noqa
                          5.475783821761762, 5.287245553568592, 5.098173555199839, 4.9094792717510405, 4.720719298680829, 4.531647299908886, 4.34317471893237, 4.154193043389875, 3.965293480781334, 3.776738790038809,  # noqa
                          3.5876667892710588, 3.398988929388237, 3.21021253435042, 3.0211405346799314, 2.832684378034022, 2.6436862796354577, 2.4548031385783653, 2.266232024590982, 2.0771600249608118, 1.8884985872846263,  # noqa
                          1.6997057697665783, 1.5106337704474448, 1.3221940362544053, 1.1331795152532123, 0.9443127965741156, 0.755725260058978, 0.5666532604547262, 0.37800824531925603, 0.18919900541025156, 0.0001270058636]  # noqa

        true_wet_mass = 30.027342365870904
        true_dry_mass = 16.276708605080003

        self.assertEqual(masstable.nozzle_area, 0)
        self.assertEqual(masstable.dry_mass, true_dry_mass)
        self.assertEqual(masstable.wet_mass, true_wet_mass)
        self.assertEqual(masstable.vac_flag, 0)
        self.assertEqual(masstable.burn_time_max, 1.9665)

        self.assertListEqual(masstable.propellant_mass.tolist(), true_prop_mass)  # type:ignore
        self.assertListEqual(masstable.burn_time.tolist(), true_burn_time)  # type:ignore
        self.assertListEqual(masstable.mass_dot.tolist(), true_mass_dot)
        self.assertListEqual(masstable.cg.tolist()[:50], true_cg[:50])
        self.assertListEqual(masstable.thrust.tolist(), true_thrust)

        self.assertAlmostEqual(masstable.get_thrust(t=0, pressure=0), 2332.6400000000003, places=self.TOLERANCE_PLACES)
        self.assertAlmostEqual(masstable.get_thrust(t=.5, pressure=0), 19977.961465400273, places=self.TOLERANCE_PLACES)

        self.assertEqual(masstable.get_wet_mass(), masstable.wet_mass)
        self.assertEqual(masstable.get_dry_mass(), masstable.dry_mass)

        self.assertEqual(masstable.get_cg(t=0), 1.1126907542005608)
        self.assertEqual(masstable.get_cg(t=.5), 1.0216607813467888)

        self.assertEqual(masstable.get_isp(t=0, pressure=0), -28.83419653016797)
        self.assertEqual(masstable.get_isp(t=.5, pressure=0), -246.27103923526175)

        self.assertEqual(masstable.get_raw_thrust(t=0), 2332.6400000000003)
        self.assertEqual(masstable.get_raw_thrust(t=.5), 19977.961465400273)

        self.assertEqual(masstable.get_mass_dot(t=0), -8.249339719080352)
        self.assertEqual(masstable.get_mass_dot(t=.5), -8.272126219866154)

        # # testing `cpp` member ----------------------------------------------------
        self.assertEqual(masstable.cpp.nozzle_area, 0)
        self.assertEqual(masstable.cpp.dry_mass, true_dry_mass)
        self.assertEqual(masstable.cpp.wet_mass, true_wet_mass)
        self.assertEqual(masstable.cpp.vac_flag, 0)
        self.assertEqual(masstable.cpp.burn_time_max, 1.9665)

        self.assertListEqual(masstable.cpp.propellant_mass, true_prop_mass)  # type:ignore
        self.assertListEqual(masstable.cpp.burn_time, true_burn_time)  # type:ignore
        self.assertListEqual(masstable.cpp.mass_dot.data.tolist(), true_mass_dot)
        self.assertListEqual(masstable.cpp.cg.data.tolist()[:50], true_cg[:50])
        self.assertListEqual(masstable.cpp.thrust.data.tolist(), true_thrust)

        self.assertAlmostEqual(masstable.cpp.get_thrust(dict(t=0, pressure=0)), 2332.6400000000003,
                               places=self.TOLERANCE_PLACES)
        self.assertAlmostEqual(masstable.cpp.get_thrust(dict(t=.5, pressure=0)), 19977.961465400273,
                               places=self.TOLERANCE_PLACES)

        self.assertEqual(masstable.cpp.get_wet_mass(), masstable.wet_mass)
        self.assertEqual(masstable.cpp.get_dry_mass(), masstable.dry_mass)

        self.assertEqual(masstable.cpp.get_cg(dict(t=0)), 1.1126907542005608)
        self.assertEqual(masstable.cpp.get_cg(dict(t=.5)), 1.0216607813467888)

        self.assertEqual(masstable.cpp.get_isp(dict(t=0, pressure=0)), -28.83419653016797)
        self.assertEqual(masstable.cpp.get_isp(dict(t=.5, pressure=0)), -246.27103923526175)

        self.assertEqual(masstable.cpp.get_raw_thrust(dict(t=0)), 2332.6400000000003)
        self.assertEqual(masstable.cpp.get_raw_thrust(dict(t=.5)), 19977.961465400273)

        self.assertEqual(masstable.cpp.get_mass_dot(dict(t=0)), -8.249339719080352)
        self.assertEqual(masstable.cpp.get_mass_dot(dict(t=.5)), -8.272126219866154)


if __name__ == '__main__':
    unittest.main()
